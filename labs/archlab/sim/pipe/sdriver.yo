                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f41003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f66802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f73802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax        # count = 0;
0x034: 6222                 | 	andq %rdx,%rdx        # len <= 0?
0x036: 713202000000000000   | 	jle Done              # if so, goto Done:
                            | 
                            | 	# Check if len is multiple of 8
0x03f: 30f80700000000000000 | 	irmovq $7, %r8
0x049: 6228                 | 	andq %rdx, %r8        # len is mul. of 8?
0x04b: 765d00000000000000   | 	jg Test               # if so, goto Loop:
0x054: 70c300000000000000   | 	jmp Loop
                            | 
0x05d:                      | Test:
0x05d: 6182                 | 	subq %r8, %rdx
                            | 
0x05f:                      | Remain:
0x05f: 50a70000000000000000 | 	mrmovq (%rdi), %r10   # read val from src...
0x069: 40a60000000000000000 | 	rmmovq %r10, (%rsi)   # ...and store it to dst
0x073: 62aa                 | 	andq %r10, %r10       # val <= 0?
0x075: 718800000000000000   | 	jle Npos_R            # if so, goto Npos_R:
0x07e: c0f00100000000000000 | 	iaddq $1, %rax        # count++
                            | 
0x088:                      | Npos_R:
0x088: c0f70800000000000000 | 	iaddq $8, %rdi        # src++
0x092: c0f60800000000000000 | 	iaddq $8, %rsi        # dst++
0x09c: c0f8ffffffffffffffff | 	iaddq $-1, %r8        # len--
0x0a6: 765f00000000000000   | 	jg Remain             # if len > 0, goto Remain
0x0af: 6222                 | 	andq %rdx, %rdx
0x0b1: 76c300000000000000   | 	jg Loop               # if so, goto Loop:
0x0ba: 703202000000000000   | 	jmp Done
                            | 
0x0c3:                      | Loop:
0x0c3: 50a70000000000000000 | 	mrmovq (%rdi), %r10   # read val from src...
0x0cd: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x0d7: 40a60000000000000000 | 	rmmovq %r10, (%rsi)   # ...and store it to dst
0x0e1: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x0eb: 50871000000000000000 | 	mrmovq 16(%rdi), %r8
0x0f5: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x0ff: 40861000000000000000 | 	rmmovq %r8, 16(%rsi)
0x109: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x113: 62aa                 | 	andq %r10, %r10       # val <= 0?
0x115: 712801000000000000   | 	jle Npos_1            # if so, goto Npos_1:
0x11e: c0f00100000000000000 | 	iaddq $1, %rax        # count++
                            | 
0x128:                      | Npos_1:
0x128: 6299                 | 	andq %r9, %r9         # val <= 0?
0x12a: 713d01000000000000   | 	jle Npos_2            # if so, goto Npos_2:
0x133: c0f00100000000000000 | 	iaddq $1, %rax        # count++
                            | 
0x13d:                      | Npos_2:
0x13d: 6288                 | 	andq %r8, %r8         # val <= 0?
0x13f: 715201000000000000   | 	jle Npos_3            # if so, goto Npos_3:
0x148: c0f00100000000000000 | 	iaddq $1, %rax        # count++
                            | 
0x152:                      | Npos_3:
0x152: 62bb                 | 	andq %r11, %r11       # val <= 0?
0x154: 716701000000000000   | 	jle Npos_4            # if so, goto Npos_4:
0x15d: c0f00100000000000000 | 	iaddq $1, %rax        # count++
                            | 
0x167:                      | Npos_4:
0x167: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10 # read val from src...
0x171: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x17b: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi) # ...and store it to dst
0x185: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)
0x18f: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x199: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11
0x1a3: 40863000000000000000 | 	rmmovq %r8, 48(%rsi)
0x1ad: 40b63800000000000000 | 	rmmovq %r11, 56(%rsi)
0x1b7: 62aa                 | 	andq %r10, %r10       # val <= 0?
0x1b9: 71cc01000000000000   | 	jle Npos_5            # if so, goto Npos_5:
0x1c2: c0f00100000000000000 | 	iaddq $1, %rax        # count++
                            | 
0x1cc:                      | Npos_5:
0x1cc: 6299                 | 	andq %r9, %r9       # val <= 0?
0x1ce: 71e101000000000000   | 	jle Npos_6          # if so, goto Npos_6:
0x1d7: c0f00100000000000000 | 	iaddq $1, %rax      # count++
                            | 
0x1e1:                      | Npos_6:
0x1e1: 6288                 | 	andq %r8, %r8       # val <= 0?
0x1e3: 71f601000000000000   | 	jle Npos_7          # if so, goto Npos_7:
0x1ec: c0f00100000000000000 | 	iaddq $1, %rax      # count++
                            | 
0x1f6:                      | Npos_7:
0x1f6: 62bb                 | 	andq %r11, %r11     # val <= 0?
0x1f8: 710b02000000000000   | 	jle Npos_8          # if so, goto Npos_8:
0x201: c0f00100000000000000 | 	iaddq $1, %rax      # count++
                            | 
0x20b:                      | Npos_8:
0x20b: c0f74000000000000000 | 	iaddq $64, %rdi     # src += 8
0x215: c0f64000000000000000 | 	iaddq $64, %rsi     # dst += 8
0x21f: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx     # len -= 8
0x229: 76c300000000000000   | 	jg Loop             # if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x232:                      | Done:
0x232: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x233:                      | End:
                            | #/* $end ncopy-ys */
0x233:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x238:                      | 	.align 8
0x238:                      | src:
0x238: ffffffffffffffff     | 	.quad -1
0x240: feffffffffffffff     | 	.quad -2
0x248: 0300000000000000     | 	.quad 3
0x250: 0400000000000000     | 	.quad 4
0x258: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x260:                      | 	.align 16
0x260:                      | Predest:
0x260: fadebc0000000000     | 	.quad 0xbcdefa
0x268:                      | dest:
0x268: abefcd0000000000     | 	.quad 0xcdefab
0x270: abefcd0000000000     | 	.quad 0xcdefab
0x278: abefcd0000000000     | 	.quad 0xcdefab
0x280: abefcd0000000000     | 	.quad 0xcdefab
0x288:                      | Postdest:
0x288: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x290:                      | .align 8
                            | # Run time stack
0x290: 0000000000000000     | 	.quad 0
0x298: 0000000000000000     | 	.quad 0
0x2a0: 0000000000000000     | 	.quad 0
0x2a8: 0000000000000000     | 	.quad 0
0x2b0: 0000000000000000     | 	.quad 0
0x2b8: 0000000000000000     | 	.quad 0
0x2c0: 0000000000000000     | 	.quad 0
0x2c8: 0000000000000000     | 	.quad 0
0x2d0: 0000000000000000     | 	.quad 0
0x2d8: 0000000000000000     | 	.quad 0
0x2e0: 0000000000000000     | 	.quad 0
0x2e8: 0000000000000000     | 	.quad 0
0x2f0: 0000000000000000     | 	.quad 0
0x2f8: 0000000000000000     | 	.quad 0
0x300: 0000000000000000     | 	.quad 0
0x308: 0000000000000000     | 	.quad 0
                            | 
0x310:                      | Stack:
