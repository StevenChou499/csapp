#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax        # count = 0;
	andq %rdx,%rdx        # len <= 0?
	jle Done              # if so, goto Done:

	# Check if len is multiple of 8
	irmovq $7, %r8
	andq %rdx, %r8        # len is mul. of 8?
	jg Test               # if so, goto Loop:
	jmp Loop

Test:
	subq %r8, %rdx

Remain:
	mrmovq (%rdi), %r10   # read val from src...
	rmmovq %r10, (%rsi)   # ...and store it to dst
	andq %r10, %r10       # val <= 0?
	jle Npos_R            # if so, goto Npos_R:
	iaddq $1, %rax        # count++

Npos_R:
	iaddq $8, %rdi        # src++
	iaddq $8, %rsi        # dst++
	iaddq $-1, %r8        # len--
	jg Remain             # if len > 0, goto Remain
	andq %rdx, %rdx
	jg Loop               # if so, goto Loop:
	jmp Done

Loop:
	mrmovq (%rdi), %r10   # read val from src...
	mrmovq 8(%rdi), %r9
	rmmovq %r10, (%rsi)   # ...and store it to dst
	rmmovq %r9, 8(%rsi)
	mrmovq 16(%rdi), %r8
	mrmovq 24(%rdi), %r11
	rmmovq %r8, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	andq %r10, %r10       # val <= 0?
	jle Npos_1            # if so, goto Npos_1:
	iaddq $1, %rax        # count++

Npos_1:
	andq %r9, %r9         # val <= 0?
	jle Npos_2            # if so, goto Npos_2:
	iaddq $1, %rax        # count++

Npos_2:
	andq %r8, %r8         # val <= 0?
	jle Npos_3            # if so, goto Npos_3:
	iaddq $1, %rax        # count++

Npos_3:
	andq %r11, %r11       # val <= 0?
	jle Npos_4            # if so, goto Npos_4:
	iaddq $1, %rax        # count++

Npos_4:
	mrmovq 32(%rdi), %r10 # read val from src...
	mrmovq 40(%rdi), %r9
	rmmovq %r10, 32(%rsi) # ...and store it to dst
	rmmovq %r9, 40(%rsi)
	mrmovq 48(%rdi), %r8
	mrmovq 56(%rdi), %r11
	rmmovq %r8, 48(%rsi)
	rmmovq %r11, 56(%rsi)
	andq %r10, %r10       # val <= 0?
	jle Npos_5            # if so, goto Npos_5:
	iaddq $1, %rax        # count++

Npos_5:
	andq %r9, %r9       # val <= 0?
	jle Npos_6          # if so, goto Npos_6:
	iaddq $1, %rax      # count++

Npos_6:
	andq %r8, %r8       # val <= 0?
	jle Npos_7          # if so, goto Npos_7:
	iaddq $1, %rax      # count++

Npos_7:
	andq %r11, %r11     # val <= 0?
	jle Npos_8          # if so, goto Npos_8:
	iaddq $1, %rax      # count++

Npos_8:
	iaddq $64, %rdi     # src += 8
	iaddq $64, %rsi     # dst += 8
	iaddq $-8, %rdx     # len -= 8
	jg Loop             # if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad 3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
