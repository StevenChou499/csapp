                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4c806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f64804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f73802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax        # count = 0;
0x034: 6222                 | 	andq %rdx,%rdx        # len <= 0?
0x036: 713202000000000000   | 	jle Done              # if so, goto Done:
                            | 
                            | 	# Check if len is multiple of 8
0x03f: 30f80700000000000000 | 	irmovq $7, %r8
0x049: 6228                 | 	andq %rdx, %r8        # len is mul. of 8?
0x04b: 765d00000000000000   | 	jg Test               # if so, goto Loop:
0x054: 70c300000000000000   | 	jmp Loop
                            | 
0x05d:                      | Test:
0x05d: 6182                 | 	subq %r8, %rdx
                            | 
0x05f:                      | Remain:
0x05f: 50a70000000000000000 | 	mrmovq (%rdi), %r10   # read val from src...
0x069: 40a60000000000000000 | 	rmmovq %r10, (%rsi)   # ...and store it to dst
0x073: 62aa                 | 	andq %r10, %r10       # val <= 0?
0x075: 718800000000000000   | 	jle Npos_R            # if so, goto Npos_R:
0x07e: c0f00100000000000000 | 	iaddq $1, %rax        # count++
                            | 
0x088:                      | Npos_R:
0x088: c0f70800000000000000 | 	iaddq $8, %rdi        # src++
0x092: c0f60800000000000000 | 	iaddq $8, %rsi        # dst++
0x09c: c0f8ffffffffffffffff | 	iaddq $-1, %r8        # len--
0x0a6: 765f00000000000000   | 	jg Remain             # if len > 0, goto Remain
0x0af: 6222                 | 	andq %rdx, %rdx
0x0b1: 76c300000000000000   | 	jg Loop               # if so, goto Loop:
0x0ba: 703202000000000000   | 	jmp Done
                            | 
0x0c3:                      | Loop:
0x0c3: 50a70000000000000000 | 	mrmovq (%rdi), %r10   # read val from src...
0x0cd: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x0d7: 40a60000000000000000 | 	rmmovq %r10, (%rsi)   # ...and store it to dst
0x0e1: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x0eb: 50871000000000000000 | 	mrmovq 16(%rdi), %r8
0x0f5: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x0ff: 40861000000000000000 | 	rmmovq %r8, 16(%rsi)
0x109: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x113: 62aa                 | 	andq %r10, %r10       # val <= 0?
0x115: 712801000000000000   | 	jle Npos_1            # if so, goto Npos_1:
0x11e: c0f00100000000000000 | 	iaddq $1, %rax        # count++
                            | 
0x128:                      | Npos_1:
0x128: 6299                 | 	andq %r9, %r9         # val <= 0?
0x12a: 713d01000000000000   | 	jle Npos_2            # if so, goto Npos_2:
0x133: c0f00100000000000000 | 	iaddq $1, %rax        # count++
                            | 
0x13d:                      | Npos_2:
0x13d: 6288                 | 	andq %r8, %r8         # val <= 0?
0x13f: 715201000000000000   | 	jle Npos_3            # if so, goto Npos_3:
0x148: c0f00100000000000000 | 	iaddq $1, %rax        # count++
                            | 
0x152:                      | Npos_3:
0x152: 62bb                 | 	andq %r11, %r11       # val <= 0?
0x154: 716701000000000000   | 	jle Npos_4            # if so, goto Npos_4:
0x15d: c0f00100000000000000 | 	iaddq $1, %rax        # count++
                            | 
0x167:                      | Npos_4:
0x167: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10 # read val from src...
0x171: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x17b: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi) # ...and store it to dst
0x185: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)
0x18f: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x199: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11
0x1a3: 40863000000000000000 | 	rmmovq %r8, 48(%rsi)
0x1ad: 40b63800000000000000 | 	rmmovq %r11, 56(%rsi)
0x1b7: 62aa                 | 	andq %r10, %r10       # val <= 0?
0x1b9: 71cc01000000000000   | 	jle Npos_5            # if so, goto Npos_5:
0x1c2: c0f00100000000000000 | 	iaddq $1, %rax        # count++
                            | 
0x1cc:                      | Npos_5:
0x1cc: 6299                 | 	andq %r9, %r9       # val <= 0?
0x1ce: 71e101000000000000   | 	jle Npos_6          # if so, goto Npos_6:
0x1d7: c0f00100000000000000 | 	iaddq $1, %rax      # count++
                            | 
0x1e1:                      | Npos_6:
0x1e1: 6288                 | 	andq %r8, %r8       # val <= 0?
0x1e3: 71f601000000000000   | 	jle Npos_7          # if so, goto Npos_7:
0x1ec: c0f00100000000000000 | 	iaddq $1, %rax      # count++
                            | 
0x1f6:                      | Npos_7:
0x1f6: 62bb                 | 	andq %r11, %r11     # val <= 0?
0x1f8: 710b02000000000000   | 	jle Npos_8          # if so, goto Npos_8:
0x201: c0f00100000000000000 | 	iaddq $1, %rax      # count++
                            | 
0x20b:                      | Npos_8:
0x20b: c0f74000000000000000 | 	iaddq $64, %rdi     # src += 8
0x215: c0f64000000000000000 | 	iaddq $64, %rsi     # dst += 8
0x21f: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx     # len -= 8
0x229: 76c300000000000000   | 	jg Loop             # if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x232:                      | Done:
0x232: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x233:                      | End:
                            | #/* $end ncopy-ys */
0x233:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x238:                      | 	.align 8
0x238:                      | src:
0x238: ffffffffffffffff     | 	.quad -1
0x240: 0200000000000000     | 	.quad 2
0x248: 0300000000000000     | 	.quad 3
0x250: fcffffffffffffff     | 	.quad -4
0x258: 0500000000000000     | 	.quad 5
0x260: 0600000000000000     | 	.quad 6
0x268: f9ffffffffffffff     | 	.quad -7
0x270: f8ffffffffffffff     | 	.quad -8
0x278: 0900000000000000     | 	.quad 9
0x280: 0a00000000000000     | 	.quad 10
0x288: 0b00000000000000     | 	.quad 11
0x290: 0c00000000000000     | 	.quad 12
0x298: 0d00000000000000     | 	.quad 13
0x2a0: 0e00000000000000     | 	.quad 14
0x2a8: 0f00000000000000     | 	.quad 15
0x2b0: f0ffffffffffffff     | 	.quad -16
0x2b8: efffffffffffffff     | 	.quad -17
0x2c0: eeffffffffffffff     | 	.quad -18
0x2c8: 1300000000000000     | 	.quad 19
0x2d0: 1400000000000000     | 	.quad 20
0x2d8: 1500000000000000     | 	.quad 21
0x2e0: eaffffffffffffff     | 	.quad -22
0x2e8: 1700000000000000     | 	.quad 23
0x2f0: e8ffffffffffffff     | 	.quad -24
0x2f8: 1900000000000000     | 	.quad 25
0x300: e6ffffffffffffff     | 	.quad -26
0x308: e5ffffffffffffff     | 	.quad -27
0x310: 1c00000000000000     | 	.quad 28
0x318: 1d00000000000000     | 	.quad 29
0x320: e2ffffffffffffff     | 	.quad -30
0x328: e1ffffffffffffff     | 	.quad -31
0x330: 2000000000000000     | 	.quad 32
0x338: dfffffffffffffff     | 	.quad -33
0x340: deffffffffffffff     | 	.quad -34
0x348: ddffffffffffffff     | 	.quad -35
0x350: 2400000000000000     | 	.quad 36
0x358: dbffffffffffffff     | 	.quad -37
0x360: 2600000000000000     | 	.quad 38
0x368: 2700000000000000     | 	.quad 39
0x370: 2800000000000000     | 	.quad 40
0x378: 2900000000000000     | 	.quad 41
0x380: d6ffffffffffffff     | 	.quad -42
0x388: d5ffffffffffffff     | 	.quad -43
0x390: d4ffffffffffffff     | 	.quad -44
0x398: d3ffffffffffffff     | 	.quad -45
0x3a0: 2e00000000000000     | 	.quad 46
0x3a8: d1ffffffffffffff     | 	.quad -47
0x3b0: d0ffffffffffffff     | 	.quad -48
0x3b8: cfffffffffffffff     | 	.quad -49
0x3c0: ceffffffffffffff     | 	.quad -50
0x3c8: 3300000000000000     | 	.quad 51
0x3d0: 3400000000000000     | 	.quad 52
0x3d8: cbffffffffffffff     | 	.quad -53
0x3e0: 3600000000000000     | 	.quad 54
0x3e8: c9ffffffffffffff     | 	.quad -55
0x3f0: 3800000000000000     | 	.quad 56
0x3f8: c7ffffffffffffff     | 	.quad -57
0x400: c6ffffffffffffff     | 	.quad -58
0x408: 3b00000000000000     | 	.quad 59
0x410: c4ffffffffffffff     | 	.quad -60
0x418: 3d00000000000000     | 	.quad 61
0x420: c2ffffffffffffff     | 	.quad -62
0x428: c1ffffffffffffff     | 	.quad -63
0x430: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x440:                      | 	.align 16
0x440:                      | Predest:
0x440: fadebc0000000000     | 	.quad 0xbcdefa
0x448:                      | dest:
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640:                      | Postdest:
0x640: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x648:                      | .align 8
                            | # Run time stack
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
0x668: 0000000000000000     | 	.quad 0
0x670: 0000000000000000     | 	.quad 0
0x678: 0000000000000000     | 	.quad 0
0x680: 0000000000000000     | 	.quad 0
0x688: 0000000000000000     | 	.quad 0
0x690: 0000000000000000     | 	.quad 0
0x698: 0000000000000000     | 	.quad 0
0x6a0: 0000000000000000     | 	.quad 0
0x6a8: 0000000000000000     | 	.quad 0
0x6b0: 0000000000000000     | 	.quad 0
0x6b8: 0000000000000000     | 	.quad 0
0x6c0: 0000000000000000     | 	.quad 0
                            | 
0x6c8:                      | Stack:
